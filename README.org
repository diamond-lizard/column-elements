* column-elements - Manipulate elements in column blocks
** Introduction
This package will let you move, insert, delete, yank, and kill
elements in column block, and have the other elements automatically
move aside or fill in gaps as needed.
** Definitions
For these definitions, let's assume the only text in a buffer or narrowed region looks like this:
*** Diagram 1
#+BEGIN_EXAMPLE
Lorem ipsum         Donec pretium        Cum sociis natoque      Nulla posuere.
dolor sit           posuere tellus.      penatibus et magnis     Donec vitae dolor
amet,consectetuer   Proin quam nisl,     dis parturient montes,  Nullam tristique
adipiscing elit.    tincidunt et,mattis  nascetur ridiculus      diam non turpis.
Donec hendrerit     eget,convallis       mus.
tempor tellus.      nec,purus.
#+END_EXAMPLE
*** Column elements, columns, and column blocks
Diagram 1 shows text that the functions in this package will interpret
as 4 column blocks.

Each column block is delimited by certain characters that extend from
the top of the buffer to the bottom.  In our case, these delimiters
are spaces.  (Which characters are used as delimiters is configurable
in using the column-elements--column-block-delimiters variable)

Each column block starts has a left boundary column and a right
boundary column.  In Diagram 1, the left boundary of the first first
column block is column 0, and the right boundary is column 16.  The
second column block's left boundary is 20 and right boundary is 38,
etc.

Here, "Lorem ipsum" would be considered the first element in the first
column block, "Proin quam nisl," would be considered the third element
in the second column block, etc.
** Examples
*** Example 1 - (column-elements--insert 'point)
Let's assume the only text in the current buffer (or narrowed buffer) looks like this:
**** Diagram Ex-1a:
#+BEGIN_EXAMPLE
Lorem ipsum         Donec pretium        Cum sociis natoque      Nulla posuere.
dolor sit           posuere tellus.      penatibus et magnis     Donec vitae dolor
amet,consectetuer   Proin quam nisl,     dis parturient montes,  Nullam tristique
adipiscing elit.    tincidunt et,mattis  nascetur ridiculus      diam non turpis.
Donec hendrerit     eget,convallis       mus.
tempor tellus.      nec,purus.
#+END_EXAMPLE
Now, with point anywhere in "Proin quam nisl,", calling
(column-elements--insert 'point) will change the text in
Diagram Ex-1a to that in Diagram Ex-1b, with point moving to where the "P"
in "Proin quam nisl," used to be (ie. directly below the "p" in
"posuere tellus.")
**** Diagram Ex-1b:
#+BEGIN_EXAMPLE
Lorem ipsum         Donec pretium        nec,purus.              Nulla posuere.
dolor sit           posuere tellus.      Cum sociis natoque      Donec vitae dolor
amet,consectetuer                        penatibus et magnis     Nullam tristique
adipiscing elit.    Proin quam nisl,     dis parturient montes,  diam non turpis.
Donec hendrerit     tincidunt et,mattis  nascetur ridiculus
tempor tellus.      eget,convallis       mus.
#+END_EXAMPLE
*** Example 2 - (column-elements--move 'up)
Then, calling (column-elements--move 'up) will change the text from
Diagram Ex-1b to that in Diagram Ex-2, with point moving to where the "p"
in "poseure tellus." used to be:
**** Diagram Ex-2:
#+BEGIN_EXAMPLE
Lorem ipsum         Donec pretium        nec,purus.              Nulla posuere.
dolor sit                                Cum sociis natoque      Donec vitae dolor
amet,consectetuer   posuere tellus.      penatibus et magnis     Nullam tristique
adipiscing elit.    Proin quam nisl,     dis parturient montes,  diam non turpis.
Donec hendrerit     tincidunt et,mattis  nascetur ridiculus
tempor tellus.      eget,convallis       mus.
#+END_EXAMPLE

From Diagram Ex-2, if we had called (column-elements--move 'down) the
text and point would change back to that shown in Diagram Ex-1b.
*** Example 3 - (column-elements-move 'right)
Instead, from Diagram Ex-2 we will call (column-elements--right) and
get the text in Diagram Ex-3.
**** Diagram Ex-3:
#+BEGIN_EXAMPLE
Lorem ipsum         Donec pretium        Cum sociis natoque      Nulla posuere.
dolor sit           posuere tellus.                              Donec vitae dolor
amet,consectetuer   Proin quam nisl,     penatibus et magnis     Nullam tristique
adipiscing elit.    tincidunt et,mattis  dis parturient montes,  diam non turpis.
Donec hendrerit     eget,convallis       nascetur ridiculus
tempor tellus.      nec,purus.           mus.
#+END_EXAMPLE
*** Example 4 - (column-elements--horizontal-wrap)
If the column-elements-horizontal-wrap variable contains nil and from
Diagram Ex-3 we call (column-elements--move 'right) twice more, the
text will change to that in Diagram Ex-4a.  Otherwise, it will change
to that in Diagram Ex-4b.
**** Diagram Ex-4a:
#+BEGIN_EXAMPLE
Lorem ipsum         Donec pretium        Cum sociis natoque      Nulla posuere.
dolor sit           posuere tellus.      penatibus et magnis
amet,consectetuer   Proin quam nisl,     dis parturient montes,  Donec vitae dolor
adipiscing elit.    tincidunt et,mattis  nascetur ridiculus      Nullam tristique
Donec hendrerit     eget,convallis       mus.                    diam non turpis.
tempor tellus.      nec,purus.
#+END_EXAMPLE
**** Diagram Ex-4b:
#+BEGIN_EXAMPLE
Lorem ipsum         tempor tellus.       nec,purus.              Nulla posuere.
                    Donec pretium        Cum sociis natoque      Donec vitae dolor
dolor sit           posuere tellus.      penatibus et magnis     Nullam tristique
amet,consectetuer   Proin quam nisl,     dis parturient montes,  diam non turpis.
adipiscing elit.    tincidunt et,mattis  nascetur ridiculus
Donec hendrerit     eget,convallis       mus.
#+END_EXAMPLE

Likewise, vertical movement with (column-elements--move 'up) or
(column-elements-move 'down) will wrap or not wrap based on the
value of the same variable.
*** Example 5 - (column-elements--move 'left)
Note that entire column blocks will be shifted left or right to
maintain the original inter-column spacing, which in this case is 3
spaces between the first two column blocks, and 2 spaces between each
of the other column blocks.

For example, with point anywhere in "tincidunt et,mattis" in
Diagram Ex-4b, calling (column-elements--move 'left) will result in the
text in Diagram Ex-5.
**** Diagram Ex-5:
#+BEGIN_EXAMPLE
Lorem ipsum           Donec hendrerit   nec,purus.              Nulla posuere.
                      tempor tellus.    Cum sociis natoque      Donec vitae dolor
dolor sit             Donec pretium     penatibus et magnis     Nullam tristique
amet,consectetuer     posuere tellus.   dis parturient montes,  diam non turpis.
tincidunt et,mattis   Proin quam nisl,  nascetur ridiculus
adipiscing elit.      eget,convallis    mus.
#+END_EXAMPLE
*** Example 6 - (column-elements--delete)
Another feature is by calling (column-elements--delete) we can delete
column block entries and have the rest of the existing entries wrap to
fill in the space left by the deleted entry.

For example, to delete the blank space in the text in Diagram Ex-5, move point
anywhere on it and call (column-elements--delete).  The text in
Diagram Ex-5 will then change to that in Diagram Ex-6.
**** Diagram Ex-6:
#+BEGIN_EXAMPLE
Lorem ipsum           tempor tellus.    Cum sociis natoque      Donec vitae dolor
dolor sit             Donec pretium     penatibus et magnis     Nullam tristique
amet,consectetuer     posuere tellus.   dis parturient montes,  diam non turpis.
tincidunt et,mattis   Proin quam nisl,  nascetur ridiculus
adipiscing elit.      eget,convallis    mus.
Donec hendrerit       nec,purus.        Nulla posuere.
#+END_EXAMPLE
** Variables
*** column-elements--delimiter
The string to use as a delimiter of column blocks.

A vertical column of least one delimiter must extend from the top of the buffer to the bottom in order to distinguish one column block from the next.

If this variable is set to *nil*, then each column is considered to be a column block.

The default column block delimiter is " " (a space).
**** Example 1
#+BEGIN_EXAMPLE
one   two foo
three four
#+END_EXAMPLE

With this variable set to " " (a space), the above buffer would be considered to have two column blocks.  The first column block would contain the elements "one" and "three", while the second would contain the elements "two foo" and "four".

If this variable was set to *nil* then each column would be considered to be its own column block, so there would be 13 column blocks in this example.
**** Example 2
#+BEGIN_EXAMPLE
one+++++two  foo
three+++four bar
#+END_EXAMPLE

With this variable set to "+" (a plus sign), the above buffer would be considered to have two column blocks.  The first column block would consist of two elements: "one++" and "three".  The second column block would also have two elements: "two  foo" and "four bar".
*** column-elements--horizontal-wrap
This variable controls what happens when a column-elements-move
command tries to move a column element to the right of the right-most
column block, or to the left of the left-most column block.

Valid values of this variable are:
**** nil
Do not allow movement of column elements to the left of the left-most
column block or to the right of the right-most column block.

Whether an error is displayed when such forbidden movement is
attempted is controlled by the
column-elements--horizontal-wrap-error-level variable.
***** Example - (setq column-elements--horizontal-wrap nil)
#+BEGIN_EXAMPLE
foobar  one  hello
baz     two  there
#+END_EXAMPLE
Attempts to move "foobar" or "baz" left will fail.  Attempts to move "hello" or "there" right will fail.
**** 'same-row
Movement of a column element to the left of the left-most column block moves the element to the same row of the right-most column block.

Movement of a column element to the right of the right-most column block moves the element to the same row of the left-most column block.
***** Example - (setq column-elements--horizontal-wrap 'same-row)
#+BEGIN_EXAMPLE
foobar  one  hello
baz     two  there
#+END_EXAMPLE

Moving "foobar" left will change the buffer to:

#+BEGIN_EXAMPLE
baz  two    foobar
one  hello  there
#+END_EXAMPLE
**** 'previous-next-row
If the column element to be moved left is at the top-left of the left-most column block, it will be moved to the bottom-right of the right-most column block.

If the column element to be moved right is at the bottom-right of the right-most column block, it will be moved to the top-left of the left-most column block.

Otherwise:

Movement of a column element to the left of the left-most column block moves the element to the previous row of the right-most column block.

Movement of a column element to the right of the right-most column block moves the element to the next row of the left-most column block.
***** Examples - (setq column-elements--horizontal-wrap 'previous-next-row)
#+BEGIN_EXAMPLE
foobar  one  hello
baz     two  there
#+END_EXAMPLE

Moving "foobar" left will result in:

#+BEGIN_EXAMPLE
baz  two    there
one  hello  foobar
#+END_EXAMPLE

From here, moving "there" to the right will result in:

#+BEGIN_EXAMPLE
baz    one  hello
there  two  foobar
#+END_EXAMPLE
*** column-elements--horizontal-wrap-error-level
If the value of this variable is **nil** then no errors are displayed
when movement of a column element is attempted to the left of the
left-most column block or to the right of the right-most column block
and the value of the column-elements--horizontal-wrap variable is
**nil**.

If the value of column-elements--horizontal-wrap-error-level is not
**nil** and the column-elements--horizontal-wrap variable is **nil**,
and movment of a column element is attempted to the left of the
left-most column block or to the right of the right-most column block,
then an error will be displayed.
** Utility functions
*** column-elements--column-block-count
Returns the number of column blocks that are detected to be in the buffer.
**** Example
#+BEGIN_EXAMPLE
foobar  hello
baz     there
#+END_EXAMPLE

With the buffer containing only the text in the example above, this
function will return 2.
*** column-elements--column-block-boundaries-at-point
Returns a cons pair containing the start and end column of the column block at point.
**** Example
#+BEGIN_EXAMPLE
foobar  hello
baz     there
#+END_EXAMPLE

With point anywhere on "foobar", "baz", or the spaces directly under "bar",
this function will return (0 . 5)

With point anywhere on "hello" or "there", this function will return (8 . 12)

With point anywhere else in the example buffer, this function will return nil.
*** column-elements--column-block-boundaries
Returns a list of the boundaries of each column block.  The boundaries of
each column block is represented by a cons pair of the start and end
column of that column block.
**** Example
#+BEGIN_EXAMPLE
foobar  hello
baz
#+END_EXAMPLE

The boundaries of the two column blocks in the example would be
((0 . 5) (8 . 12))
** Notes
*** All column blocks are assumed to be left-justified
** LICENSE
Copyright (C) 2020 - Sergey Goldgaber

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
