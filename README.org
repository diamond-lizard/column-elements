* emacs-text-blocks - Manipulate blocks and sub-blocks of text
NOTE: This package is in PRE-ALPHA

Currently, most of it *does not work*.... yet.

The documentation here is mostly aspirational.

Hopefully it will be implemented some day.
** Introduction
This package will let you move, insert, delete, yank, and kill blocks
and sub-blocks of text, and have the other blocks or sub-blocks
automatically move aside or fill in gaps as needed.
** Definitions
For these definitions, let's assume the only text in a buffer or narrowed region looks like this:
*** Diagram 1
#+BEGIN_EXAMPLE
Lorem ipsum         Donec pretium        Cum sociis natoque      Nulla posuere.
dolor sit           posuere tellus.      penatibus et magnis     Donec vitae dolor
amet,consectetuer   Proin quam nisl,     dis parturient montes,  Nullam tristique
adipiscing elit.    tincidunt et,mattis  nascetur ridiculus      diam non turpis.
Donec hendrerit     eget,convallis       mus.
tempor tellus.      nec,purus.
#+END_EXAMPLE
*** Blocks, sub-blocks, and block boundaries
Diagram 1 shows text that the functions in this package will interpret
as 4 blocks.

Each block is delimited by certain characters.  In this
example, these delimiters are spaces.  (Which characters are used as
delimiters is configurable in using the
=text-blocks--block-delimiters= variable)

Each block  has a left boundary and a right boundary.

The left boundary is the column containing the left-most
character in a block that's adjacent to a column full of
delimiters (which is known as a *gap column*) or column 0, if the text
in that block extends left to include column 0.

The right boundary is the column containing the right-most
character in a block that's adjacent to a *gap column* or the
right-most column in the buffer, if the text in that block
extends right to include the right-most column.

The table below contains the boundaries for each of the blocks
in Diagram 1.  The blocks are numbered left-to-right from 1
to 4.

|-------+---------------+----------------|
| Block | Left boundary | Right boundary |
|-------+---------------+----------------|
|     1 |             0 |             16 |
|     2 |            20 |             38 |
|     3 |            41 |             62 |
|     4 |            65 |             81 |
|-------+---------------+----------------|

Here, "Lorem ipsum" would be considered the first element in the first
block, "Proin quam nisl," would be considered the third element
in the second block, etc.
*** Block rows and top and bottom boundaries
Blocks have not just left and right boundaries, but top and bottom boundaries as well.

The top and bottom boundaries of a block are the lines of text adjacent to a *gap line* (a line that is either empty or which contains only delimiter characters) or adjacent to the top or bottom of the buffer.

Consider a buffer which contains only the text in Diagram 2 below.
*** Diagram 2
#+BEGIN_EXAMPLE
Lorem ipsum         Donec pretium
dolor sit           posuere tellus.

amet,consectetuer   Proin quam nisl,
adipiscing elit.    tincidunt et,mattis
#+END_EXAMPLE

In Diagram 2 there are 4 blocks, which for the sake of this example we'll number 1 through 4, with block 1 being the block containing "Lorem ipsum dolor sit", block 2 contains "Donec pretium posuere tellus.", block 3 contains "amet, consectetuer adipiscing elit." and block 4 contains "Proin quam nisl, tincidunt et,mattis".

The table below contains the boundaries of each block:

|-------+------+-------+-----+--------|
| Block | Left | Right | Top | Bottom |
|-------+------+-------+-----+--------|
|     1 |    0 |    10 |   1 |      2 |
|     2 |   20 |    34 |   1 |      2 |
|     3 |    0 |    16 |   4 |      5 |
|     4 |   20 |    38 |   4 |      5 |
|-------+------+-------+-----+--------|

Also note that Diagram 2 contains two rows of blocks.  The first row of blocks contains blocks 1 and 2, while the second row of blocks contains blocks 3 and 4.

Gap lines are not part of any block.
** Examples
*** Example 1 - (text-blocks--insert 'point)
Let's assume the only text in the current buffer (or narrowed buffer) looks like this:
**** Diagram Ex-1a:
#+BEGIN_EXAMPLE
Lorem ipsum         Donec pretium        Cum sociis natoque      Nulla posuere.
dolor sit           posuere tellus.      penatibus et magnis     Donec vitae dolor
amet,consectetuer   Proin quam nisl,     dis parturient montes,  Nullam tristique
adipiscing elit.    tincidunt et,mattis  nascetur ridiculus      diam non turpis.
Donec hendrerit     eget,convallis       mus.
tempor tellus.      nec,purus.
#+END_EXAMPLE
Now, with point anywhere in "Proin quam nisl,", calling
(text-blocks--insert 'point) will change the text in
Diagram Ex-1a to that in Diagram Ex-1b, with point moving to where the "P"
in "Proin quam nisl," used to be (ie. directly below the "p" in
"posuere tellus.")
**** Diagram Ex-1b:
#+BEGIN_EXAMPLE
Lorem ipsum         Donec pretium        nec,purus.              Nulla posuere.
dolor sit           posuere tellus.      Cum sociis natoque      Donec vitae dolor
amet,consectetuer                        penatibus et magnis     Nullam tristique
adipiscing elit.    Proin quam nisl,     dis parturient montes,  diam non turpis.
Donec hendrerit     tincidunt et,mattis  nascetur ridiculus
tempor tellus.      eget,convallis       mus.
#+END_EXAMPLE
*** Example 2 - (text-blocks--move 'up)
Then, calling (text-blocks--move 'up) will change the text from
Diagram Ex-1b to that in Diagram Ex-2, with point moving to where the "p"
in "poseure tellus." used to be:
**** Diagram Ex-2:
#+BEGIN_EXAMPLE
Lorem ipsum         Donec pretium        nec,purus.              Nulla posuere.
dolor sit                                Cum sociis natoque      Donec vitae dolor
amet,consectetuer   posuere tellus.      penatibus et magnis     Nullam tristique
adipiscing elit.    Proin quam nisl,     dis parturient montes,  diam non turpis.
Donec hendrerit     tincidunt et,mattis  nascetur ridiculus
tempor tellus.      eget,convallis       mus.
#+END_EXAMPLE

From Diagram Ex-2, if we had called (text-blocks--move 'down) the
text and point would change back to that shown in Diagram Ex-1b.
*** Example 3 - (text-blocks-move 'right)
Instead, from Diagram Ex-2 we will call (text-blocks--right) and
get the text in Diagram Ex-3.
**** Diagram Ex-3:
#+BEGIN_EXAMPLE
Lorem ipsum         Donec pretium        Cum sociis natoque      Nulla posuere.
dolor sit           posuere tellus.                              Donec vitae dolor
amet,consectetuer   Proin quam nisl,     penatibus et magnis     Nullam tristique
adipiscing elit.    tincidunt et,mattis  dis parturient montes,  diam non turpis.
Donec hendrerit     eget,convallis       nascetur ridiculus
tempor tellus.      nec,purus.           mus.
#+END_EXAMPLE
*** Example 4 - (text-blocks--horizontal-wrap)
If the text-blocks-horizontal-wrap variable contains nil and from
Diagram Ex-3 we call (text-blocks--move 'right) twice more, the
text will change to that in Diagram Ex-4a.  Otherwise, it will change
to that in Diagram Ex-4b.
**** Diagram Ex-4a:
#+BEGIN_EXAMPLE
Lorem ipsum         Donec pretium        Cum sociis natoque      Nulla posuere.
dolor sit           posuere tellus.      penatibus et magnis
amet,consectetuer   Proin quam nisl,     dis parturient montes,  Donec vitae dolor
adipiscing elit.    tincidunt et,mattis  nascetur ridiculus      Nullam tristique
Donec hendrerit     eget,convallis       mus.                    diam non turpis.
tempor tellus.      nec,purus.
#+END_EXAMPLE
**** Diagram Ex-4b:
#+BEGIN_EXAMPLE
Lorem ipsum         tempor tellus.       nec,purus.              Nulla posuere.
                    Donec pretium        Cum sociis natoque      Donec vitae dolor
dolor sit           posuere tellus.      penatibus et magnis     Nullam tristique
amet,consectetuer   Proin quam nisl,     dis parturient montes,  diam non turpis.
adipiscing elit.    tincidunt et,mattis  nascetur ridiculus
Donec hendrerit     eget,convallis       mus.
#+END_EXAMPLE

Likewise, vertical movement with (text-blocks--move 'up) or
(text-blocks-move 'down) will wrap or not wrap based on the
value of the same variable.
*** Example 5 - (text-blocks--move 'left)
Note that entire blocks will be shifted left or right to
maintain the original inter-column spacing, which in this case is 3
spaces between the first two blocks, and 2 spaces between each
of the other blocks.

For example, with point anywhere in "tincidunt et,mattis" in
Diagram Ex-4b, calling (text-blocks--move 'left) will result in the
text in Diagram Ex-5.
**** Diagram Ex-5:
#+BEGIN_EXAMPLE
Lorem ipsum           Donec hendrerit   nec,purus.              Nulla posuere.
                      tempor tellus.    Cum sociis natoque      Donec vitae dolor
dolor sit             Donec pretium     penatibus et magnis     Nullam tristique
amet,consectetuer     posuere tellus.   dis parturient montes,  diam non turpis.
tincidunt et,mattis   Proin quam nisl,  nascetur ridiculus
adipiscing elit.      eget,convallis    mus.
#+END_EXAMPLE
*** Example 6 - (text-blocks--delete)
Another feature is by calling (text-blocks--delete) we can delete
block entries and have the rest of the existing entries wrap to
fill in the space left by the deleted entry.

For example, to delete the blank space in the text in Diagram Ex-5, move point
anywhere on it and call (text-blocks--delete).  The text in
Diagram Ex-5 will then change to that in Diagram Ex-6.
**** Diagram Ex-6:
#+BEGIN_EXAMPLE
Lorem ipsum           tempor tellus.    Cum sociis natoque      Donec vitae dolor
dolor sit             Donec pretium     penatibus et magnis     Nullam tristique
amet,consectetuer     posuere tellus.   dis parturient montes,  diam non turpis.
tincidunt et,mattis   Proin quam nisl,  nascetur ridiculus
adipiscing elit.      eget,convallis    mus.
Donec hendrerit       nec,purus.        Nulla posuere.
#+END_EXAMPLE
** Variables
*** text-blocks--delimiter
The string to use as a delimiter of blocks.

A vertical column of least one delimiter must extend from the top of the buffer to the bottom in order to distinguish one block from the next.

If this variable is set to *nil*, then each column is considered to be a block.

The default block delimiter is " " (a space).
**** Example 1
#+BEGIN_EXAMPLE
one   two foo
three four
#+END_EXAMPLE

With this variable set to " " (a space), the above buffer would be considered to have two blocks.  The first block would contain the elements "one" and "three", while the second would contain the elements "two foo" and "four".

If this variable was set to *nil* then each column would be considered to be its own block, so there would be 13 blocks in this example.
**** Example 2
#+BEGIN_EXAMPLE
one+++++two  foo
three+++four bar
#+END_EXAMPLE

With this variable set to "+" (a plus sign), the above buffer would be considered to have two blocks.  The first block would consist of two elements: "one++" and "three".  The second block would also have two elements: "two  foo" and "four bar".
*** text-blocks--horizontal-wrap
This variable controls what happens when a text-blocks-move
command tries to move a sub-block to the right of the right-most
block, or to the left of the left-most block.

Valid values of this variable are:
**** nil
Do not allow movement of sub-block to the left of the left-most
block or to the right of the right-most block.

Whether an error is displayed when such forbidden movement is
attempted is controlled by the
text-blocks--horizontal-wrap-error-level variable.
***** Example - (setq text-blocks--horizontal-wrap nil)
#+BEGIN_EXAMPLE
foobar  one  hello
baz     two  there
#+END_EXAMPLE
Attempts to move "foobar" or "baz" left will fail.  Attempts to move "hello" or "there" right will fail.
**** 'same-row
Movement of a sub-block to the left of the left-most block moves the element to the same row of the right-most block.

Movement of a sub-block to the right of the right-most block moves the element to the same row of the left-most block.
***** Example - (setq text-blocks--horizontal-wrap 'same-row)
#+BEGIN_EXAMPLE
foobar  one  hello
baz     two  there
#+END_EXAMPLE

Moving "foobar" left will change the buffer to:

#+BEGIN_EXAMPLE
baz  two    foobar
one  hello  there
#+END_EXAMPLE
**** 'previous-next-row
If the sub-block to be moved left is at the top-left of the left-most block, it will be moved to the bottom-right of the right-most block.

If the sub-block to be moved right is at the bottom-right of the right-most block, it will be moved to the top-left of the left-most block.

Otherwise:

Movement of a sub-block to the left of the left-most block moves the element to the previous row of the right-most block.

Movement of a sub-block to the right of the right-most block moves the element to the next row of the left-most block.
***** Examples - (setq text-blocks--horizontal-wrap 'previous-next-row)
#+BEGIN_EXAMPLE
foobar  one  hello
baz     two  there
#+END_EXAMPLE

Moving "foobar" left will result in:

#+BEGIN_EXAMPLE
baz  two    there
one  hello  foobar
#+END_EXAMPLE

From here, moving "there" to the right will result in:

#+BEGIN_EXAMPLE
baz    one  hello
there  two  foobar
#+END_EXAMPLE
*** text-blocks--horizontal-wrap-error-level
If the value of this variable is **nil** then no errors are displayed
when movement of a sub-block is attempted to the left of the
left-most block or to the right of the right-most block
and the value of the text-blocks--horizontal-wrap variable is
**nil**.

If the value of text-blocks--horizontal-wrap-error-level is not
**nil** and the text-blocks--horizontal-wrap variable is **nil**,
and movment of a sub-block is attempted to the left of the
left-most block or to the right of the right-most block,
then an error will be displayed.
** Utility functions
*** text-blocks--block-count
Returns the number of blocks that are detected to be in the buffer.
**** Example
#+BEGIN_EXAMPLE
foobar  hello
baz     there
#+END_EXAMPLE

With the buffer containing only the text in the example above, this
function will return 2.
*** text-blocks--block-boundaries-at-point
This function takes a single argument, which must be one of either:
='left=, ='right=, ='top=, or ='bottom=

If the argument is either ='left= or ='right=, then this function
returns the left or right boundary of the block at point.

If the argument is either ='top= or ='bottom=, then this function
returns the top or bottom boundary of the entire row of blocks
at point.
**** Example
#+BEGIN_EXAMPLE
foobar  hello
baz     there
#+END_EXAMPLE

If the above text is the only text in the buffer or narrowed buffer, with point anywhere on "foobar", "baz", or the spaces directly under
"bar", the table below shows what the function will return for every valid argument:

|----------+--------------|
| Argument | Return Value |
|----------+--------------|
| 'top     |            1 |
| 'bottom  |            2 |
| 'left    |            0 |
| 'right   |            5 |
|----------+--------------|

With point anywhere on "hello" or "there", the table below shows what
the function will return for every valid argument:

|----------+--------------|
| Argument | Return Value |
|----------+--------------|
| 'top     |            1 |
| 'bottom  |            2 |
| 'left    |            8 |
| 'right   |           12 |
|----------+--------------|

With point anywhere else in the example buffer, this function will return nil.
** Notes
*** All blocks are assumed to be left-justified
** LICENSE
Copyright (C) 2020 - Sergey Goldgaber

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
